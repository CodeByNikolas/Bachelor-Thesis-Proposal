---
references:
- id: bargmann:2019:SurveySecureContainer
  author:
    - family: Bargmann
      given: Christian
    - family: Tropmann-Frick
      given: Marina
  citation-key: bargmann:2019:SurveySecureContainer
  issued:
    - year: 2019
  language: en
  source: Zotero
  title: >-
    A Survey On Secure Container Isolation Approaches for Multi-Tenant Container
    Workloads and Serverless Computing
  type: paper-conference

- id: barros:2022:EditingSupportSoftware
  abstract: >-
    Effectively using software languages, be it programming or domain-specific
    languages, requires effective editing support. Modern IDEs, modeling tools,
    and code editors typically provide sophisticated support to create,
    comprehend, or modify instances---programs or models---of particular
    languages. Unfortunately, building such editing support is challenging.
    While the engineering of languages is well understood and supported by
    modern model-driven techniques, there is a lack of engineering principles
    and best practices for realizing their editing support. Especially
    domain-specific languages---often created by smaller organizations or
    individual developers, sometimes even for single projects---would benefit
    from better methods and tools to create proper editing support.We study
    practices for implementing editing support in 30 so-called language
    servers---implementations of the language server protocol (LSP). The latter
    is a recent de facto standard to realize editing support for languages,
    separated from the editing tools (e.g., IDEs or modeling tools), enhancing
    the reusability and quality of the editing support. Witnessing the LSP's
    popularity---a whopping 121 language servers are in existence today---we
    take this opportunity to analyze the implementations of 30 language servers,
    some of which support multiple languages. We identify concerns that
    developers need to take into account when developing editing support, and we
    synthesize implementation practices to address them, based on a systematic
    analysis of the servers' source code. We hope that our results shed light on
    an important technology for software language engineering, that facilitates
    language-oriented programming and systems development, including
    model-driven engineering.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Barros
      given: Djonathan
    - family: Peldszus
      given: Sven
    - family: Assunção
      given: Wesley K. G.
    - family: Berger
      given: Thorsten
  citation-key: barros:2022:EditingSupportSoftware
  collection-title: MODELS '22
  container-title: >-
    Proceedings of the 25th International Conference on Model Driven Engineering
    Languages and Systems
  DOI: 10.1145/3550355.3552452
  event-place: New York, NY, USA
  ISBN: 978-1-4503-9466-6
  issued:
    - year: 2022
      month: 10
      day: 24
  page: 232–243
  publisher: Association for Computing Machinery
  publisher-place: New York, NY, USA
  source: ACM Digital Library
  title: >-
    Editing support for software languages: implementation practices in language
    server protocols
  title-short: Editing support for software languages
  type: paper-conference
  URL: https://dl.acm.org/doi/10.1145/3550355.3552452

- id: laigner:2025:TransactionalCloudApplications
  abstract: >-
    Transactional cloud applications such as payment, booking, reservation
    systems, and complex business workflows are currently being rewritten for
    deployment in the cloud. This migration to the cloud is happening mainly for
    reasons of cost and scalability. Over the years, application developers have
    used different migration approaches, such as microservice frameworks,
    actors, and stateful dataflow systems. The migration to the cloud has
    brought back data management challenges traditionally handled by database
    management systems. Those challenges include ensuring state consistency,
    maintaining durability, and managing the application lifecycle. At the same
    time, the shift to a distributed computing infrastructure introduced new
    issues, such as message delivery, task scheduling, containerization, and
    (auto)scaling. Although the data management community has made progress in
    developing analytical and transactional database systems, transactional
    cloud applications have received little attention in database research. This
    tutorial aims to highlight recent trends in the area and discusses open
    research challenges for the data management community.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Laigner
      given: Rodrigo
    - family: Christodoulou
      given: George
    - family: Psarakis
      given: Kyriakos
    - family: Katsifodimos
      given: Asterios
    - family: Zhou
      given: Yongluan
  citation-key: laigner:2025:TransactionalCloudApplications
  container-title: Companion of the 2025 International Conference on Management of Data
  DOI: 10.1145/3722212.3725635
  issued:
    - year: 2025
      month: 6
      day: 22
  page: 829-836
  source: arXiv.org
  title: 'Transactional Cloud Applications: Status Quo, Challenges, and Opportunities'
  title-short: Transactional Cloud Applications
  type: paper-conference
  URL: http://arxiv.org/abs/2504.17106

- id: leitner:2012:ApplicationlevelPerformanceMonitoring
  abstract: >-
    Monitoring of applications deployed to Infrastructure as-a-Service clouds is
    still an open problem. In this paper, we discuss an approach based on the
    complex event processing paradigm, which allows application developers to
    specify and monitor high-level application performance metrics. We use the
    case of a Web 2.0 sentiment anal ysis application to illustrate the
    limitations we currently experience with regard to cloud monitoring, and
    show how our approach allows for more expressive definitions of monitored
    metrics. Furthermore, we indicate how the higher-level metrics produced by
    our approach can be used to increase application elasticity in an existing
    cloud middleware.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Leitner
      given: Philipp
    - family: Inzinger
      given: Christian
    - family: Hummer
      given: Waldemar
    - family: Satzger
      given: Benjamin
    - family: Dustdar
      given: Schahram
  citation-key: leitner:2012:ApplicationlevelPerformanceMonitoring
  container-title: >-
    2012 Fifth IEEE International Conference on Service-Oriented Computing and
    Applications (SOCA)
  DOI: 10.1109/SOCA.2012.6449437
  event-place: Taipei, Taiwan
  event-title: >-
    2012 5th IEEE International Conference on Service-Oriented Computing and
    Applications (SOCA)
  ISBN: 978-1-4673-4775-4 978-1-4673-4773-0 978-1-4673-4774-7
  issued:
    - year: 2012
      month: 12
  language: en
  page: 1-8
  publisher: IEEE
  publisher-place: Taipei, Taiwan
  source: DOI.org (Crossref)
  title: >-
    Application-level performance monitoring of cloud services based on the
    complex event processing paradigm
  type: paper-conference
  URL: http://ieeexplore.ieee.org/document/6449437/

- id: rahaman:2023:AccessControlDesign
  abstract: >-
    Protecting the resources of a cloud-native application is essential to meet
    an organization’s security goals. Cloud-native applications manage thousands
    of user requests, and an organization must employ a proper access control
    mechanism. However, unfortunately, developers sometimes grumble when
    designing and enforcing access decisions for a gigantic scalable
    application. It is sometimes complicated to choose the potential access
    control model for the system. Cloud-native software architecture has become
    an integral part of the industry to manage and maintain customer needs. A
    microservice is a combination of small independent services that might have
    hundreds of parts, where the developers must protect the individual
    services. An efficient access control model can defend the respective
    services and consistency. This study intends to comprehensively analyze the
    current access control mechanism and techniques utilized in cloud-native
    architecture. For this, we present a systematic mapping study that extracts
    current approaches, categorizes access control patterns, and provides
    developers guidance to meet security principles. In addition, we have
    gathered 234 essential articles, of which 29 have been chosen as primary
    studies. Our comprehensive analysis will guide practitioners to identify
    proper access control mechanisms applicable to ensuring security goals in
    cloud-native architectures.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Rahaman
      given: Md Shahidur
    - family: Tisha
      given: Sadia Nasrin
    - family: Song
      given: Eunjee
    - family: Cerny
      given: Tomas
  citation-key: rahaman:2023:AccessControlDesign
  container-title: Sensors
  DOI: 10.3390/s23073413
  ISSN: 1424-8220
  issue: '7'
  issued:
    - year: 2023
      month: 1
  language: en
  license: http://creativecommons.org/licenses/by/3.0/
  page: '3413'
  publisher: Multidisciplinary Digital Publishing Institute
  source: www.mdpi.com
  title: >-
    Access Control Design Practice and Solutions in Cloud-Native Architecture: A
    Systematic Mapping Study
  title-short: Access Control Design Practice and Solutions in Cloud-Native Architecture
  type: article-journal
  URL: https://www.mdpi.com/1424-8220/23/7/3413
  volume: '23'

- id: rask:2021:SpecificationLanguageServer
  abstract: >-
    The Language Server Protocol (LSP) changed the field of Integrated
    Development Environments(IDEs), as it decouples core (programming) language
    features functionality from editor smarts, thus lowering the effort required
    to extend an IDE to support a language. The concept is a success and has
    been adopted by several programming languages and beyond. This is shown by
    the emergence of several LSP implementations for the many programming and
    specification languages (languages with a focus on modelling, reasoning, or
    proofs). However, for such languages LSP has been ad-hocly extended with the
    additional functionalities that are typically not found for programming
    languages and thus not supported in LSP. This foils the original LSP
    decoupling goal, because the move towards a new IDE requires yet another
    re-implementation of the ad-hoc LSP extension. In this paper we contribute
    with a conservative extension of LSP providing a first proposal towards a
    standard protocol decoupling the support of specification languages from the
    IDE. We hope our research attracts the larger community and motivates the
    need of a joint task force leading to a standardised LSP extension serving
    the particular needs of specification languages.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Rask
      given: Jonas Kjær
    - family: Madsen
      given: Frederik Palludan
    - family: Battle
      given: Nick
    - family: Macedo
      given: Hugo Daniel
    - family: Larsen
      given: Peter Gorm
  citation-key: rask:2021:SpecificationLanguageServer
  container-title: Electronic Proceedings in Theoretical Computer Science
  container-title-short: Electron. Proc. Theor. Comput. Sci.
  DOI: 10.4204/EPTCS.338.3
  ISSN: 2075-2180
  issued:
    - year: 2021
      month: 8
      day: 6
  page: 3-18
  source: arXiv.org
  title: >-
    The Specification Language Server Protocol: A Proposal for Standardised LSP
    Extensions
  title-short: The Specification Language Server Protocol
  type: article-journal
  URL: http://arxiv.org/abs/2108.02961
  volume: '338'

- id: saini:2019:WebCollaborativeModelling
  abstract: >-
    Collaborative modelling has become a necessity when developing a complex
    system or in a team of modellers with a diverse set of expertise. Textual
    notations have a long history in software engineering because of their fast
    editing style, simple usage, and scalability. Therefore, we propose a novel
    collaborative modelling framework for the graphical User Requirements
    Notation (URN) which we call tColab. It uses the text-based TGRL (Textual
    Goal-oriented Requirement Language) to build URN goal models and then
    automatically generates corresponding graphical models. This framework is
    based on the architecture of Eclipse Che and Theia. On one side, Theia
    provides support for LSP (Language Server Protocol) so that textual models
    can be built and their corresponding graphical models can be generated in a
    browser IDE (Integrated Development Environment). On the other hand, Eclipse
    Che adds support for collaboration where multiple modellers can contribute
    to building the textual models in an online collaborative manner. This
    initiative aims to replace the jUCMNAV tool, which is the most comprehensive
    URN modelling tool to date but only supports a single user.
  accessed:
    - year: 2025
      month: 9
      day: 2
  author:
    - family: Saini
      given: Rijul
    - family: Bali
      given: Shivani
    - family: Mussbacher
      given: Gunter
  citation-key: saini:2019:WebCollaborativeModelling
  container-title: >-
    2019 IEEE/ACM 11th International Workshop on Modelling in Software
    Engineering (MiSE)
  DOI: 10.1109/MiSE.2019.00010
  event-title: >-
    2019 IEEE/ACM 11th International Workshop on Modelling in Software
    Engineering (MiSE)
  ISSN: 2575-4475
  issued:
    - year: 2019
      month: 5
  page: 15-18
  source: IEEE Xplore
  title: >-
    Towards Web Collaborative Modelling for the User Requirements Notation Using
    Eclipse Che and Theia IDE
  type: paper-conference
  URL: https://ieeexplore.ieee.org/document/8877072

- id: sun:2012:JVMPortableSandboxingJavas
  abstract: >-
    Although Java provides strong support for safety and security, native
    libraries used in a Java application can open security holes. Previous work,
    Robusta, puts native libraries in a sandbox to protect the integrity and
    security of Java. However, Robusta’s implementation modifies the internals
    of OpenJDK, a particular implementation of a Java Virtual Machine (JVM). As
    such, it is not portable to other JVM implementations. This paper shows how
    to make the idea of sandboxing native libraries JVM-portable. We present a
    two-layer approach for sandboxing without modifying the internals of a JVM.
    We also discuss our experience of sandboxing Java’s core native libraries.
    Experiments show that our approach of JVM-portable sandboxing incurs modest
    performance overhead on SPECjvm 2008 benchmark programs.
  author:
    - family: Sun
      given: Mengtao
    - family: Tan
      given: Gang
  citation-key: sun:2012:JVMPortableSandboxingJavas
  container-title: Computer Security – ESORICS 2012
  DOI: 10.1007/978-3-642-33167-1_48
  editor:
    - family: Foresti
      given: Sara
    - family: Yung
      given: Moti
    - family: Martinelli
      given: Fabio
  event-place: Berlin, Heidelberg
  ISBN: 978-3-642-33167-1
  issued:
    - year: 2012
  language: en
  page: 842-858
  publisher: Springer
  publisher-place: Berlin, Heidelberg
  source: Springer Link
  title: JVM-Portable Sandboxing of Java’s Native Libraries
  type: paper-conference
...
